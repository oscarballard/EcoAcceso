// <auto-generated />
using System;
using EcoAccesso.Infrastruture.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoAccesso.Infrastruture.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240728221751_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.IncidentReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IncidentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtectedAreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProtectedAreaID");

                    b.HasIndex("UserID");

                    b.ToTable("IncidentReports");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.MaintenanceEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProtectedAreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ProtectedAreaID");

                    b.ToTable("MaintenanceEvents");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublishedByID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PublishedByID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.PermissionRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PermissionRequests");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.PermissionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ability")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionRequest", (string)null);
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("ProtectedAreaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProtectedAreaID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.VisitHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtectedAreaID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ProtectedAreaID");

                    b.HasIndex("UserID");

                    b.ToTable("VisitHistories");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Weather", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<string>("AlertDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Forecast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtectedAreaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProtectedAreaID");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.IncidentReport", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.PermissionRequest", "PermissionRequest")
                        .WithMany()
                        .HasForeignKey("ProtectedAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "User")
                        .WithMany("IncidentReports")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.MaintenanceEvent", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.PermissionRequest", "PermissionRequest")
                        .WithMany()
                        .HasForeignKey("ProtectedAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRequest");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.News", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "PublishedBy")
                        .WithMany("PublishedNews")
                        .HasForeignKey("PublishedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishedBy");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.PermissionRequest", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "User")
                        .WithMany("PermissionRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.PermissionRequest", "PermissionRequest")
                        .WithMany()
                        .HasForeignKey("ProtectedAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.VisitHistory", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.PermissionRequest", "PermissionRequest")
                        .WithMany()
                        .HasForeignKey("ProtectedAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoAccesso.Core.Domain.Entities.User", "User")
                        .WithMany("VisitHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.Weather", b =>
                {
                    b.HasOne("EcoAccesso.Core.Domain.Entities.PermissionRequest", "PermissionRequest")
                        .WithMany()
                        .HasForeignKey("ProtectedAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRequest");
                });

            modelBuilder.Entity("EcoAccesso.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("IncidentReports");

                    b.Navigation("Notifications");

                    b.Navigation("PermissionRequests");

                    b.Navigation("PublishedNews");

                    b.Navigation("Reservations");

                    b.Navigation("VisitHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
